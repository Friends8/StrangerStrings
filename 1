# 1) Write a applet program to print String
# Program:
#  PrintString(file/Classname)

import java.applet.Applet;
import java.awt.Graphics;

public class PrintString extends Applet {
    public void paint(Graphics g) {
        g.drawString("Hii name whtup", 50, 100);
    }
}

#HTML File:
#PrintString.html

<html>
<body>
    <applet code="PrintString.class" width="300" height="300">
    </applet>
</body>
</html>




# 2) Write a program to implement simple applet that set Fore ground , Back ground color drawa rectangle, fill a rectangle and display it.
# Program:
# ColorRectangleApplet(file/classname)

import java.applet.Applet;
import java.awt.Color;
import java.awt.Graphics;

public class ColorRectangleApplet extends Applet {
    public void init() {
        setBackground(Color.YELLOW);   
        setForeground(Color.BLUE);    
    }
    public void paint(Graphics g) {
        g.drawRect(50, 50, 200, 100);
        g.setColor(Color.RED);
        g.fillRect(100, 200, 150, 80);
    }
}

#HTML File:
#ColorRectangleApplet.html

  <body>
    <applet code="ColorRectangleApplet.class" width="400" height="400">
    </applet>
  </body>
</html>





# 3) Write a Java Applet program to create a simple GUI  consists of  Button, Radio Button, Text Field, Checkbox, and Label.
# Program:
# SimpleGUIApplet(file/classname)

import java.applet.Applet;
import java.awt.*;
public class SimpleGUIApplet extends Applet {
    public void init() {
        setLayout(new FlowLayout());
        Label lbl = new Label("Enter Name:");
        add(lbl);
        TextField tf = new TextField(15);
        add(tf);
        Checkbox cb1 = new Checkbox("Accept Terms");
        add(cb1);
        CheckboxGroup genderGroup = new CheckboxGroup();
        Checkbox male = new Checkbox("Male", genderGroup, false);
        Checkbox female = new Checkbox("Female", genderGroup, false);
        add(male);
        add(female);
        Button btn = new Button("Submit");
        add(btn);
    }
}

# HTML File:
#SimpleGUIApplet.html

<html>
  <body>
    <applet code="SimpleGUIApplet.class" width="300" height="200">
    </applet>
  </body>
</html>




# 4) AIM : Develop an  Applet that draws a circle. The Dimension of the applet should be 500 × 300 pixels. The circle should be centered in the  applet and have a radius of 100 pixels. Display  your name inside centered dina circle (Using drawOval() method).
# Program:
# MyCircleApplet(file/classname)

import java.applet.Applet;
import java.awt.*;
/* 
<applet code="MyCircleApplet.class" width="500" height="300"></applet>
*/
public class MyCircleApplet extends Applet {
    public void paint(Graphics g) {
        int appletWidth = getWidth();   
        int appletHeight = getHeight(); 
        int radius = 100;
        int centerX = appletWidth / 2;
        int centerY = appletHeight / 2;
        g.drawOval(centerX - radius, centerY - radius, 2 * radius, 2 * radius);
        g.setFont(new Font("Arial", Font.BOLD, 20));
        String name = "name";
        FontMetrics fm = g.getFontMetrics();
        int textWidth = fm.stringWidth(name);
        int textHeight = fm.getAscent();
        g.drawString(name, centerX - textWidth / 2, centerY + textHeight / 4);
    }
}

#HTML File:
#MyCircleApplet.html

<html>
  <body>
    <applet code="MyCircleApplet.class" width="500" height="300"></applet>
  </body>
</html>





# 5) Draw  ten Black circles in a vertical column in the center of the applet. 
#Program:
#TenCirclesApplet(file/classname)

import java.applet.Applet;
import java.awt.*;
/* 
<applet code="TenCirclesApplet.class" width="500" height="500"></applet>
*/
public class TenCirclesApplet extends Applet {
    public void paint(Graphics g) {
        setBackground(Color.WHITE);
        g.setColor(Color.BLACK);
        int appletWidth = getWidth();
        int appletHeight = getHeight();
        int circleDiameter = 40;   // Each circle's diameter
        int spacing = 10;          // Space between circles
        int x = (appletWidth - circleDiameter) / 2;
        int totalHeight = (10 * circleDiameter) + (9 * spacing);
        int startY = (appletHeight - totalHeight) / 2;
        for (int i = 0; i < 10; i++) {
            int y = startY + i * (circleDiameter + spacing);
            g.fillOval(x, y, circleDiameter, circleDiameter);  // <-- Filled circle
        }
    }
}





# 6) Develop a program that has only one button in the frame, clicking on the button cycles through the colors : Red - Green - Blue and so on. One color changes per click.(use getBackGround() method to get the current color).
#Program :
#ColorCycleFrame(file/classname)

#ColorCycleFrame.java
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

public class ColorCycleFrame extends JFrame implements ActionListener {
    JButton btn;

    public ColorCycleFrame() {
        setTitle("Color Cycle Program");
        setSize(400, 300);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new FlowLayout());

        btn = new JButton("Change Color");
        btn.addActionListener(this);
        add(btn);

        getContentPane().setBackground(Color.RED);
        setVisible(true);
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        Color current = getContentPane().getBackground();

        if (current.equals(Color.RED)) {
            getContentPane().setBackground(Color.GREEN);
        } else if (current.equals(Color.GREEN)) {
            getContentPane().setBackground(Color.BLUE);
        } else {
            getContentPane().setBackground(Color.RED);
        }
    }

    public static void main(String[] args) {
        new ColorCycleFrame();
    }
}


# ColorCycleFrame.html
<html>
<body>
<applet code="ColorCycleFrame.class" width="300" height="200"></applet>>
</body>
</html>






# 7) Develop an program that contains three check boxes and 30 x 30 pixel canvas. The three checkboxes should be labeled “Red”, “Green”,
“Blue”. The selection of the check boxes determine the color of the canvas. For example, if the user selects both “Red” and “Blue”,the canvas should be purple.

# Program 
#  ColorCanvasApplet (file/classname)
import java.applet.Applet;
import java.awt.*;
import java.awt.event.*;

public class ColorCanvasApplet extends Applet implements ItemListener {
    Checkbox red, green, blue;
    Canvas colorCanvas;

    public void init() {
        setLayout(new FlowLayout());

        red = new Checkbox("Red");
        green = new Checkbox("Green");
        blue = new Checkbox("Blue");

        red.addItemListener(this);
        green.addItemListener(this);
        blue.addItemListener(this);

        colorCanvas = new Canvas();
        colorCanvas.setSize(100, 100);

        add(red);
        add(green);
        add(blue);
        add(colorCanvas);

        updateColor();
    }

    public void itemStateChanged(ItemEvent e) {
        updateColor();
    }

    private void updateColor() {
        int r = red.getState() ? 255 : 0;
        int g = green.getState() ? 255 : 0;
        int b = blue.getState() ? 255 : 0;

        colorCanvas.setBackground(new Color(r, g, b));
        colorCanvas.repaint();
    }
}

#ColorCanvasApplet.html
<html>
  <body>
    <applet code="ColorCanvasApplet.class" width="300" height="200"></applet>
  </body>
</html>








8) Hospital Mangement
# 

import java.io.*;
import java.util.*;

class Patient{
    String id, name, disease;
    int age;
     
    public Patient(String id, String name, int age, String disease){
        this.id=id;
        this.name=name;
        this.age=age;
        this.disease=disease;
    }
   
    public String toStoring(){
        return id + "," + name + "," + age + "," + disease;
    }
}

class Doctor{
    String id, name, specialization;
   
    public Doctor(String id, String name, String specialization){
        this.id=id;
        this.name=name;
        this.specialization=specialization;
    }
   
    public String toString(){
        return id + "," + name + "," + specialization;
    }
}

class Appointment{
    String patientId, doctorId, date;
   
    public Appointment(String patientId, String doctorId, String date){
        this.patientId=patientId;
        this.doctorId=doctorId;
        this.date=date;
    }
   
    public String toString(){
        return patientId + "," + doctorId + "," + date;
    }
}

public class HospitalManagementSystem {
    static File patientFile = new File ("patients.txt");
    static File doctorFile = new File ("doctors.txt");
    static File appointmentFile = new File ("appointments.txt");
    
    //=========Utility===============
    public static void writeToFile(File file, String data, boolean append){
        try(FileWriter fw = new FileWriter(file, append)){
            fw.write(data + "\n");
        }
        catch(IOException e){
            System.out.println("Error Writing file:" + file.getName());
        }
    }

    public static List<String> readFile(File file){
        List<String> lines = new ArrayList<>();
        if(!file.exists()) return lines;
        try(Scanner sc = new Scanner(file)){
            while(sc.hasNextLine()){
                lines.add(sc.nextLine());
            }
        }
        catch(IOException e){
            System.out.println("Error Writing file:" + file.getName());
        }
        return lines;
    }
    
    //============Patient Section==========
    public static void addPatient(Patient p){
        writeToFile(patientFile,p.toString(), true);
        System.out.println("Patient Added Successfully.");
    }
    
    public static void viewPatients(){
        List<String> records = readFile(patientFile);
        if(records.isEmpty()){
            System.out.println("No patients found.");
            return;
        }
        System.out.println("\n--- Patient Records ---");
        for(String line : records){
            String[] d = line.split(",");
            System.out.println("ID:" + d[0] + "| Name:" + d[1] + "| Age:" + d[2] + "| Disease:" + d[3]);
        }
    }
    
    //======Doctor Section=======
    public static void addDoctor(Doctor d){
        writeToFile(doctorFile, d.toString(), true);
        System.out.println("Doctor Added Successfully.");
    }
    
    public static void viewDoctors(){
        List<String> records = readFile(doctorFile);
        if(records.isEmpty()){
            System.out.println("No doctors found.");
            return;
        }
        System.out.println("\n--- Doctors Records ---");
        for(String line : records){
            String[] d = line.split(",");
            System.out.println("ID:" + d[0] + "| Name:" + d[1] + "| Specialization:" + d[2]);
        }
    }
    
    //========Appointment Section==========
    public static void addAppointment(Appointment a){
        boolean patientExists = false, doctorExists = false;
        for(String p : readFile(patientFile)){
            if(p.split(",")[0].equals(a.patientId)) patientExists = true;
        }
        for(String d : readFile(doctorFile)){
            if(d.split(",")[0].equals(a.doctorId)) doctorExists = true;
        }
        
        if(!patientExists){
            System.out.println("Invalid Patient ID.");
            return;
        }
        if(!doctorExists){
            System.out.println("Inavalid Doctor ID.");
            return;
        }
        writeToFile(appointmentFile, a.toString(), true);
        System.out.println("Appointment booked Successfully.");
    }
    
    public static void viewAppointments(){
        List<String> records = readFile(appointmentFile);
        if(records.isEmpty()){
            System.out.println("No appointments found.");
            return;
        }
        System.out.println("\n--- Appointments ---");
        for(String line : records){
            String[] d = line.split(",");
            System.out.println("PatientID:" + d[0] + "| DoctorID:" + d[1] + "| Date:" + d[2]);
        }
    }
    //========Main Menu======
    public static void main(String[] args){
        Scanner sc = new Scanner(System.in);
        int choice;
        do{
          System.out.println("\n===== Hospital Management System =======");
          System.out.println("1. Add Patients");
          System.out.println("2. View Patients");
          System.out.println("3. Add Doctor");
          System.out.println("4. View Doctors");
          System.out.println("5. Book Appointment");
          System.out.println("6. View Appointments");
          System.out.println("7. Exit");
          System.out.println("Enter choice: ");
          choice = sc.nextInt();
          
          switch (choice){
              case 1:
                  System.out.println("Enter Patient ID:");
                  String pid = sc.nextLine();
                  System.out.println("Enter Name:");
                  String pname = sc.nextLine();
                  System.out.println("Enter age:");
                  int age = sc.nextInt(); sc.nextLine();
                  System.out.println("Enter Disease:");
                  String disease = sc.nextLine();
                  addPatient(new Patient(pid, pname, age, disease));
                  break;
                  
              case 2:
                  viewPatients();
                  break;
                  
                  
              case 3:
                  System.out.println("Enter Doctor ID:");
                  String did = sc.nextLine();
                  System.out.println("Enter Name:");
                  String dname = sc.nextLine();
                  System.out.println("Enter specialization:");
                  String spec = sc.nextLine();
                  addDoctor(new Doctor(did, dname, spec));
                  break;

              case 4:
                  viewDoctors();
                  break;
                  
                  
              case 5:
                  System.out.println("Enter Patient ID:");
                  String apPid = sc.nextLine();
                  System.out.println("Enter Doctor ID:");
                  String apDid = sc.nextLine();
                  System.out.println("Enter Date (dd-mm-yyyy):");
                  String date = sc.nextLine();
                  addAppointment(new Appointment(apPid, apDid, date));
                  break;
                  
              case 6:
                  viewAppointments();
                  break;

              case 7:
                 System.out.println("Exiting...");
                 break;
                 
              default :
                  System.out.println("Invalid choice.");
                  
                  

          }
        }
        while(choice != 7);
        sc.close();
    }
}








9) Traffic control
import java.io.*;
import java.util.Scanner;

public class TrafficControl {
    static File file = new File("traffic.txt");

    // Create/Update traffic signal
    public static void writeSignal(String signal) {
        try {
            FileWriter writer = new FileWriter(file);
            writer.write(signal);
            writer.close();
            System.out.println("Traffic signal updated to: " + signal);
        } catch (IOException e) {
            System.out.println("Error while writing file");
            e.printStackTrace();
        }
    }

    // Read current signal
    public static void readSignal() {
        try {
            if (!file.exists()) {
                System.out.println("No signal found! Please set one first.");
                return;
            }
            Scanner reader = new Scanner(file);
            if (reader.hasNextLine()) {
                String signal = reader.nextLine();
                System.out.println("Current Traffic Signal is: " + signal);
            } else {
                System.out.println("File is empty! Please set a signal first.");
            }
            reader.close();
        } catch (IOException e) {
            System.out.println("Error while reading file");
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int choice;

        do {
            System.out.println("\n=== Traffic Control Menu ===");
            System.out.println("1. Set Signal (Red/Yellow/Green)");
            System.out.println("2. View Current Signal");
            System.out.println("3. Exit");
            System.out.print("Enter your choice: ");
            choice = sc.nextInt();
            sc.nextLine(); // Consume newline

            switch (choice) {
                case 1:
                    System.out.print("Enter Signal (Red/Yellow/Green): ");
                    String signal = sc.nextLine();
                    writeSignal(signal);
                    break;
                case 2:
                    readSignal();
                    break;
                case 3:
                    System.out.println("Exiting...");
                    break;
                default:
                    System.out.println("Invalid choice! Please try again.");
            }
        } while (choice != 3);

        sc.close();
    }
}








10) Movie Ticket
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
import java.io.*;
import java.util.*;

class Ticket {
    String movieName;
    int seatNumber;
    String customerName;

    public Ticket(String movieName, int seatNumber, String customerName) {
        this.movieName = movieName;
        this.seatNumber = seatNumber;
        this.customerName = customerName;
    }

    @Override
    public String toString() {
        return movieName + "," + seatNumber + "," + customerName;
    }
}

public class MovieTicketCRUD {
    static File ticketFile = new File("ticket.txt");
    static String[] movies = {"Avengers", "Inception", "Avatar"};
    static int totalSeats = 10;

    // Write list of records to file
    public static void writeToFile(List<String> records) {
        try (FileWriter fw = new FileWriter(ticketFile, false)) {
            for (String r : records)
                fw.write(r + "\n");
        } catch (IOException e) {
            System.out.println("Error writing file: " + e.getMessage());
        }
    }

    // Read all lines from file
    public static List<String> readFile() {
        List<String> lines = new ArrayList<>();
        if (!ticketFile.exists())
            return lines;
        try (Scanner sc = new Scanner(ticketFile)) {
            while (sc.hasNextLine())
                lines.add(sc.nextLine());
        } catch (Exception e) {
            System.out.println("Error reading file: " + e.getMessage());
        }
        return lines;
    }

    // Book a ticket
    public static void bookTicket(Ticket t) {
        List<String> records = readFile();
        for (String line : records) {
            String[] data = line.split(",");
            if (data[0].equalsIgnoreCase(t.movieName) && Integer.parseInt(data[1]) == t.seatNumber) {
                System.out.println("Seat Already Booked!");
                return;
            }
        }
        records.add(t.toString());
        writeToFile(records);
        System.out.println("Ticket booked for " + t.customerName + " | Movie: " + t.movieName + " | Seat: " + t.seatNumber);
    }

    // View all bookings
    public static void viewBookings() {
        List<String> records = readFile();
        if (records.isEmpty()) {
            System.out.println("No Booking Found");
            return;
        }
        System.out.println("\n--- All Bookings ---");
        for (String line : records) {
            String[] d = line.split(",");
            System.out.println("Movie: " + d[0] + " | Seat: " + d[1] + " | Customer: " + d[2]);
        }
    }

    // Update a booking by customer name
    public static void updateBooking(String customerName, int newSeat) {
        List<String> records = readFile();
        boolean updated = false;

        for (int i = 0; i < records.size(); i++) {
            String[] data = records.get(i).split(",");
            // Find the customer
            if (data[2].equalsIgnoreCase(customerName)) {
                String movieName = data[0];

                // Check if the new seat is already booked for the same movie
                boolean seatTaken = false;
                for (String r : records) {
                    String[] d = r.split(",");
                    if (d[0].equalsIgnoreCase(movieName) && Integer.parseInt(d[1]) == newSeat) {
                        seatTaken = true;
                        break;
                    }
                }

                if (seatTaken) {
                    System.out.println("Seat " + newSeat + " is already booked for " + movieName);
                    return;
                } else {
                    // Update the seat
                    records.set(i, movieName + "," + newSeat + "," + customerName);
                    updated = true;
                    break;
                }
            }
        }

        if (updated) {
            writeToFile(records);
            System.out.println("Booking updated for " + customerName);
        } else {
            System.out.println("Customer not found!");
        }
    }

    // Delete a booking by customer name
    public static void deleteBooking(String customerName) {
        List<String> records = readFile();
        boolean removed = records.removeIf(line -> line.split(",")[2].equalsIgnoreCase(customerName));
        if (removed) {
            writeToFile(records);
            System.out.println("Booking deleted for " + customerName);
        } else {
            System.out.println("Customer not found!");
        }
    }

    // Main method to test
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        while (true) {
            System.out.println("\n1. Book Ticket\n2. View Bookings\n3. Update Booking\n4. Delete Booking\n5. Exit");
            System.out.print("Enter choice: ");
            int choice = sc.nextInt();
            sc.nextLine(); // consume newline

            switch (choice) {
                case 1:
                    System.out.print("Enter movie name: ");
                    String movie = sc.nextLine();
                    System.out.print("Enter seat number: ");
                    int seat = sc.nextInt();
                    sc.nextLine();
                    System.out.print("Enter customer name: ");
                    String customer = sc.nextLine();
                    bookTicket(new Ticket(movie, seat, customer));
                    break;
                case 2:
                    viewBookings();
                    break;
                case 3:
                    System.out.print("Enter customer name to update: ");
                    String custUpdate = sc.nextLine();
                    System.out.print("Enter new seat number: ");
                    int newSeat = sc.nextInt();
                    sc.nextLine();
                    updateBooking(custUpdate, newSeat);
                    break;
                case 4:
                    System.out.print("Enter customer name to delete: ");
                    String custDelete = sc.nextLine();
                    deleteBooking(custDelete);
                    break;
                case 5:
                    System.out.println("Exiting...");
                    System.exit(0);
                    break;
                default:
                    System.out.println("Invalid choice!");
            }
        }
    }
}
